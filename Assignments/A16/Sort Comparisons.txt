Sorting Comparisons
15 integers in random order


Quick Sort 6 microsecs
Heap Sort 8 microsecs
Radix Sort 48 microsecs
Count Sort 63 microsecs
*all measurements further down are in microsecs


1000 integers in reverse order


Count Sort 604
Radix Sort 1174
Heap Sort 1280
Quick Sort 18170
	

1000 integers 80% sorted (every 5 has +5)


Count Sort 610
Heap Sort 1422
Radix Sort 1553
Quick Sort 22880
	

1000 integers in order


Count Sort 620
Radix Sort 1181
Heap Sort 1449
Quick Sort 28653
	

10000 integers in random order


Count Sort 5802
Quick Sort 6782
Radix Sort 18847
Heap Sort 19061

	
Count Sort was almost always superior when sorting integers. Quick sort only beat <br>
it when there was such a small amount of items. Quick sort was also very poor unless there <br>
was a very large amount of data, or a very small amount. Radix and Heap were always similar. <br>


15 floats in random order


Quick Sort 7 microsecs
Heap Sort 9 microsecs
Radix Sort 251 microsecs
Count Sort 421 microsecs
*all measurements further down are in microsecs


1000 floats in reverse order


Count Sort 624
Radix Sort 1347
Heap Sort 4772
Quick Sort 19583
	

1000 floats 80% sorted (every 5 has +5)


Count Sort 627
Heap Sort 1553
Radix Sort 4743
Quick Sort 24298
	

1000 floats in order


Count Sort 634
Heap Sort 1546
Radix Sort 4726
Quick Sort 30296


10000 floats in random order


Count Sort 5908
Quick Sort 7148
Heap Sort 20501
Radix Sort 45470

	
Count Sort was almost always superior when sorting floats as well. <br>
Quick sort only beat it when there was such a small amount of items. <br>
Quick sort was also very poor unless there was a very large amount of data, <br>
or a very small amount. Count performed well, regardless. Radix and heap were <br>
always similar. Was having trouble getting strings to work properly. But I <br>
assume they will follow the above patterns as integers were VERY identical to floats. <br>


15 strings in random order
*all measurements further down are in microsecs


1000 strings in reverse order
	

1000 strings 80% sorted (every 5 has +5)
	

1000 strings in order
	

10000 strings in random order
